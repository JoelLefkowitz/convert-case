[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "convert-case"
description = "Convert between string cases with built-in case inference."
version = "1.2.3"

keywords = ["convert", "case", "kebab", "camel", "snake"]

classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
]

requires-python = ">=3.8"
dependencies = []

[project.optional-dependencies]
all = [
    "autoflake~=1.4",
    "black~=22.3.0",
    "build~=1.2.0",
    "bump2version~=1.0.0",
    "furo~=2024.1.0",
    "isort~=5.10.0",
    "matplotlib~=3.8.0",
    "mypy~=0.9",
    "myst-parser~=2.0.0",
    "pylint~=2.17.0",
    "pytest-cov~=5.0.0",
    "pytest~=7.1.0",
    "sphinx-autoapi~=3.0.0",
    "Sphinx~=7.2.0",
    "sphinxext-opengraph~=0.9.0",
    "thx~=0.5.0",
    "trufflehog3~=3.0.0",
    "twine~=5.0.0",
    "walkmate~=1.5.0",
]

[project.license]
name = "MIT"
file = "LICENSE.md"
content-type = "text/markdown"

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
repository = "https://github.com/JoelLefkowitz/"
homepage = "https://joellefkowitz.github.io/"

[[project.authors]]
name = "Joel Lefkowitz"
email = "joellefkowitz@hotmail.com"

[tool.metadata]
publisher = "PyPI"
languages = ["Python"]
frameworks = []
paradigms = ["Functional"]
lifecycle = "Alpha"

[tool.hatch.build.targets.sdist]
include = ["src/**/*.py"]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.hatch.build.targets.wheel.sources]
src = ""

[tool.thx.jobs]
lint = [
    "npx cspell . --dot --gitignore",
    "pylint src --disable=C0114,C0115,C0116,C0411,C3001",
    "mypy -m src --ignore-missing-import",
    "trufflehog3",
]

format = [
    "black .",
    "isort . --no-sections --remove-redundant-aliases",
    "npx prettier . --write",
]

test = "pytest . --doctest-modules --cov --cov-report=xml"
docs = "sphinx-build docs/sphinx docs/dist"

[tool.coverage.run]
data_file = "coverage/.coverage"

[tool.coverage.xml]
output = "coverage/cobertura.xml"
